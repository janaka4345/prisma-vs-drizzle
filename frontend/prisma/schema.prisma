// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma"
  output   = "./zod" // (default) the directory where generated zod schemas will be saved

  relationModel = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Guest {
  id         String    @id @default(uuid())
  first_name String
  last_name  String
  email      String    @unique
  phone_no   String?
  Booking    Booking[]
}

model Payment_status {
  id     String @id @default(uuid())
  status String @unique

  Booking Booking[]
}

model Booking {
  id               String          @id @default(uuid())
  checkin_date     DateTime
  checkout_date    DateTime
  num_adults       Int
  num_children     Int
  booking_amount   Float
  guest            Guest           @relation(fields: [guestId], references: [id], onDelete: Cascade)
  guestId          String
  payment_status   Payment_status? @relation(fields: [payment_statusId], references: [id], onDelete: Cascade)
  payment_statusId String?
  booking_addon    booking_addon[]
  booking_room     booking_room[]
}

model booking_room {
  room      Room    @relation(fields: [roomId], references: [id])
  booking   Booking @relation(fields: [bookingId], references: [id])
  roomId    String
  bookingId String

  @@id([roomId, bookingId])
}

model booking_addon {
  addon   Addon   @relation(fields: [addonId], references: [id])
  booking Booking @relation(fields: [bookingId], references: [id])

  addonId   String
  bookingId String

  @@id([addonId, bookingId])
}

model Room {
  id           String         @id @default(uuid())
  room_number  Int            @unique
  floor        Floor          @relation(fields: [floorId], references: [id])
  floorId      String
  room_class   Room_class     @relation(fields: [room_classId], references: [id])
  room_classId String
  status       Room_status    @relation(fields: [statusId], references: [id])
  statusId     String
  booking_room booking_room[]
}

model roomclass_feature {
  feature      Feature    @relation(fields: [featureId], references: [id])
  room_class   Room_class @relation(fields: [room_classId], references: [id])
  featureId    String
  room_classId String

  @@id([featureId, room_classId])
}

model Addon {
  id            String          @id @default(uuid())
  addon_name    String          @unique
  Price         Float
  booking_addon booking_addon[]
}

model Floor {
  id           String @id @default(uuid())
  floor_number Int    @unique
  Room         Room[]
}

model Room_class {
  id                  String                @id @default(uuid())
  class_name          String
  base_price          Float
  Room                Room[]
  room_class_bed_type room_class_bed_type[]

  roomclass_feature roomclass_feature[]

  @@unique([base_price, class_name])
}

model Room_status {
  id     String @id @default(uuid())
  status String @unique
  Room   Room[]
}

model Bed_type {
  id                  String                @id @default(uuid())
  bed_type            String                @unique
  room_class_bed_type room_class_bed_type[]
}

model room_class_bed_type {
  room_class   Room_class @relation(fields: [room_classId], references: [id])
  room_classId String
  bed_type     Bed_type   @relation(fields: [bed_typeId], references: [id])
  bed_typeId   String
  num_of_beds  Int

  @@id([room_classId, bed_typeId])
}

model Feature {
  id                String              @id @default(uuid())
  feature_name      String              @unique
  roomclass_feature roomclass_feature[]
}
